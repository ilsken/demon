/* automatically generated by rust-bindgen */

pub const __BITS_PER_LONG: u32 = 64;
pub const __FD_SETSIZE: u32 = 1024;
pub const TASKSTATS_VERSION: u32 = 8;
pub const TS_COMM_LEN: u32 = 32;
pub const TASKSTATS_GENL_NAME: &'static [u8; 10usize] = b"TASKSTATS\0";
pub const TASKSTATS_GENL_VERSION: u32 = 1;
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fd_set>())).fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fsid_t>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fsid_t),
            "::",
            stringify!(val)
        )
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct taskstats {
    pub version: __u16,
    pub ac_exitcode: __u32,
    pub ac_flag: __u8,
    pub ac_nice: __u8,
    pub cpu_count: __u64,
    pub cpu_delay_total: __u64,
    pub blkio_count: __u64,
    pub blkio_delay_total: __u64,
    pub swapin_count: __u64,
    pub swapin_delay_total: __u64,
    pub cpu_run_real_total: __u64,
    pub cpu_run_virtual_total: __u64,
    pub ac_comm: [::std::os::raw::c_char; 32usize],
    pub ac_sched: __u8,
    pub ac_pad: [__u8; 3usize],
    pub __bindgen_padding_0: u32,
    pub ac_uid: __u32,
    pub ac_gid: __u32,
    pub ac_pid: __u32,
    pub ac_ppid: __u32,
    pub ac_btime: __u32,
    pub ac_etime: __u64,
    pub ac_utime: __u64,
    pub ac_stime: __u64,
    pub ac_minflt: __u64,
    pub ac_majflt: __u64,
    pub coremem: __u64,
    pub virtmem: __u64,
    pub hiwater_rss: __u64,
    pub hiwater_vm: __u64,
    pub read_char: __u64,
    pub write_char: __u64,
    pub read_syscalls: __u64,
    pub write_syscalls: __u64,
    pub read_bytes: __u64,
    pub write_bytes: __u64,
    pub cancelled_write_bytes: __u64,
    pub nvcsw: __u64,
    pub nivcsw: __u64,
    pub ac_utimescaled: __u64,
    pub ac_stimescaled: __u64,
    pub cpu_scaled_run_real_total: __u64,
    pub freepages_count: __u64,
    pub freepages_delay_total: __u64,
}
#[test]
fn bindgen_test_layout_taskstats() {
    assert_eq!(
        ::std::mem::size_of::<taskstats>(),
        328usize,
        concat!("Size of: ", stringify!(taskstats))
    );
    assert_eq!(
        ::std::mem::align_of::<taskstats>(),
        8usize,
        concat!("Alignment of ", stringify!(taskstats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).ac_exitcode as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(ac_exitcode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).ac_flag as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(ac_flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).ac_nice as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(ac_nice)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).cpu_count as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(cpu_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).cpu_delay_total as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(cpu_delay_total)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).blkio_count as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(blkio_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).blkio_delay_total as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(blkio_delay_total)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).swapin_count as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(swapin_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).swapin_delay_total as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(swapin_delay_total)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).cpu_run_real_total as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(cpu_run_real_total)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).cpu_run_virtual_total as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(cpu_run_virtual_total)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).ac_comm as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(ac_comm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).ac_sched as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(ac_sched)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).ac_pad as *const _ as usize },
        113usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(ac_pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).ac_uid as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(ac_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).ac_gid as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(ac_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).ac_pid as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(ac_pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).ac_ppid as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(ac_ppid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).ac_btime as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(ac_btime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).ac_etime as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(ac_etime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).ac_utime as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(ac_utime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).ac_stime as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(ac_stime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).ac_minflt as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(ac_minflt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).ac_majflt as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(ac_majflt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).coremem as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(coremem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).virtmem as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(virtmem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).hiwater_rss as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(hiwater_rss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).hiwater_vm as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(hiwater_vm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).read_char as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(read_char)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).write_char as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(write_char)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).read_syscalls as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(read_syscalls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).write_syscalls as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(write_syscalls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).read_bytes as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(read_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).write_bytes as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(write_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).cancelled_write_bytes as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(cancelled_write_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).nvcsw as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(nvcsw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).nivcsw as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(nivcsw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).ac_utimescaled as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(ac_utimescaled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).ac_stimescaled as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(ac_stimescaled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<taskstats>())).cpu_scaled_run_real_total as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(cpu_scaled_run_real_total)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).freepages_count as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(freepages_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taskstats>())).freepages_delay_total as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(taskstats),
            "::",
            stringify!(freepages_delay_total)
        )
    );
}
pub const TASKSTATS_CMD_UNSPEC: _bindgen_ty_1 = 0;
pub const TASKSTATS_CMD_GET: _bindgen_ty_1 = 1;
pub const TASKSTATS_CMD_NEW: _bindgen_ty_1 = 2;
pub const __TASKSTATS_CMD_MAX: _bindgen_ty_1 = 3;
pub type _bindgen_ty_1 = u32;
pub const TASKSTATS_TYPE_UNSPEC: _bindgen_ty_2 = 0;
pub const TASKSTATS_TYPE_PID: _bindgen_ty_2 = 1;
pub const TASKSTATS_TYPE_TGID: _bindgen_ty_2 = 2;
pub const TASKSTATS_TYPE_STATS: _bindgen_ty_2 = 3;
pub const TASKSTATS_TYPE_AGGR_PID: _bindgen_ty_2 = 4;
pub const TASKSTATS_TYPE_AGGR_TGID: _bindgen_ty_2 = 5;
pub const TASKSTATS_TYPE_NULL: _bindgen_ty_2 = 6;
pub const __TASKSTATS_TYPE_MAX: _bindgen_ty_2 = 7;
pub type _bindgen_ty_2 = u32;
pub const TASKSTATS_CMD_ATTR_UNSPEC: _bindgen_ty_3 = 0;
pub const TASKSTATS_CMD_ATTR_PID: _bindgen_ty_3 = 1;
pub const TASKSTATS_CMD_ATTR_TGID: _bindgen_ty_3 = 2;
pub const TASKSTATS_CMD_ATTR_REGISTER_CPUMASK: _bindgen_ty_3 = 3;
pub const TASKSTATS_CMD_ATTR_DEREGISTER_CPUMASK: _bindgen_ty_3 = 4;
pub const __TASKSTATS_CMD_ATTR_MAX: _bindgen_ty_3 = 5;
pub type _bindgen_ty_3 = u32;
